
Share Example Read Me
---------------------

This example deployment is essentially the same as the 'static' example, except the timeline button
bar also contains an instance of the CGI control which facilitates posting of the file to the
share.php server side script. Note the differences in the control_save.xml file.

The share.php script uses the autogenerated ID found in the mash as the basename of the
corresponding XML file it saves to the media/mash directory. To facilitate static loading of the
mash later, a 'config' attribute pointing to the media/xml/panel_player.xml file is added to the
mash tag in the mash XML file, so that it can be directly loaded into the applet as the main
configuration. The script also saves an HTML file that does this loading to the media/html
directory, using the html.php as a template. The URL to this file is then provided to Facebook's
sharer script which is popped up in a new window. Note that this file is requested immediately by
their script, so it must exist before popping up the window. One could implement the mash playback
using scripts to dynamically load the configuration, but saving static files might prove a more
robust approach (especially if they are saved to S3). 

If all works as expected, the popped up Facebook Share window should display the Movie Masher logo 
along with the mash label and description. 

save:
	index.html: uses swfobject to pull in Movie Masher applet
	media:
		html: will contain an html file for each shared mash, named with its ID
		mash:  will contain a mash file for each shared mash, named with its ID
		php:
			html.php: template file for creation of media/html/* files
			share.php: saves posted mash XML then redirects to Facebook sharer script
		xml:
			control_nav_module.xml: contains control tags for modular media tabs
			control_nav.xml: contains control tags for media tabs and embeds control_nav_module.php
			control_save.xml: contains the control tag for the CGI module
			control_search.xml: contains the control tags for the browser search field
			handler.xml: contains handler tags for media types
			mash.xml: contains default mash tag 
			media_audio.xml: contains media tags of type audio
			media_effect.xml: contains media tags of type effect
			media_image.xml: contains media tags of type image
			media_theme.xml: contains media tags of type theme
			media_transition.xml: contains media tags of type transition
			media_video.xml: contains media tags of type video
			option_font.xml: contains option tags specifying fonts
			panel_player.xml: contains just the player controls for playback-only interface
			panel.xml: contains panels tags defining interface layout
			source_module.xml: contains source tags for modular media
			source.xml: contains source tags for asset media
	README.txt: this file
	VERSION.txt: specifies the version of Movie Masher this example was bundled with

This example deployment requires the installation steps outlined in the INSTALL.txt file, plus the
following:

* Change the file permissions for the following paths such that the web server process can write:
	media/mash/
	media/html/
